#+html:<h1 align="center">Personal Curriculum for Jesse Nieboer</h1>

* Table of Contents
- [[#what][What]]
  - [[#features][Features]]
- [[#why][Why]]
- [[#for-whom][For Whom]]
- [[#how][How]]
  - [[#requirements][Requirements]]
  - [[#installation][Installation]]
  - [[#use][Use]]
    - [[#schedule][Schedule]]
  - [[#development][Development]]
    - [[#process][Process]]
    - [[#important-decisions][Important Decisions]]
    - [[#to-do][To do]]
    - [[#contributing][Contributing]]
- [[#by-whom][By Whom]]

* What
A personalized curriculum to help me get up to speed on modern programming while synergizing with my personal interests

** Features
- Foundational Skills: Learn how to leverage AI tools for learning and productivity, master algorithms and data structures with a functional programming focus, and use NixOS and Emacs for efficient, reproducible workflows.
- Language-Specific Learning: Become proficient in Python, Haskell, and Rust.
- Web Development: Learn how to build structured, styled, and accessible web pages, add interactivity with JavaScript, and generate static sites using Hakyll and Org-mode.
- Graph Databases & Semantics: Learn to model, query, and integrate structured data using graph theory, Neo4j, Cypher, and Semantic Web technologies like RDF, OWL, and SPARQL.
- AI & Machine Learning: Learn to apply machine learning algorithms, process natural language, and critically evaluate AI systems with a focus on ethical considerations.
- Capstone - Knowledge Definition DSL and Website: Design and implement a Domain-Specific Language (DSL) for knowledge definition, manage dependencies with Nix, and build a static website to display and explore your knowledge base.

* Why
I need to update my skills after a long break in my career

* For Whom
Me

* How
** Requirements
- A NixOS machine with Emacs (though others can probably follow most of the curriculum on their platform of choice)
- Internet access for online courses and resources
- Books and materials specified in the curriculum
- Access to an AI to use as a "professor"
  
** Installation
- Each class might have its own platforms and tools to install

** Use
- Follow curriculum.org according to the schedule below
*** Schedule
- [ ] Topic: Leveraging AI for Learning and Productivity (~20 hours)
  - Learn to use AI tools (e.g., ChatGPT, GitHub Copilot) to accelerate your learning and coding efficiency.
- [ ]  Topic: Testing and Debugging
  - Learn to ensure code reliability through unit testing and effective debugging techniques.
- [ ] Topic: Python Basics (~20 hours)
  - Master Python syntax, data types, control flow, and functions for immediate job readiness.
- [ ] Topic: Functional Programming in Python (~20 hours)
  - Explore functional techniques in Python (e.g., map, filter, reduce) to enhance coding skills.
- [ ] Topic: Python for Data Science (~30 hours)
  - Use Python libraries like NumPy, Pandas, and Matplotlib for data analysis, valuable for job tasks.
- [ ] Topic: Python Databases and Web Development (~30 hours)
  - Build database-driven web apps with Python (e.g., Flask, Django) to round out job-ready skills.
- [ ] Topic: HTML and CSS with Accessibility: Introduction to HTML and Accessibility (~10 hours)
  - Learn semantic HTML and accessible design as a foundation for web development.
- [ ] Topic: HTML and CSS with Accessibility: CSS Fundamentals and Visual Accessibility (~10 hours)
  - Style web pages with accessible CSS, preparing for static site work.
- [ ] Topic: Static Site Generation with Hakyll: Introduction to Hakyll (~10 hours)
  - Get started with Hakyll basics for static site generation using Haskell.
- [ ] Topic: Static Site Generation with Hakyll: Setting Up Hakyll on NixOS (~5 hours)
  - Configure your development environment for Hakyll with NixOS.
- [ ] Topic: Static Site Generation with Hakyll: Writing Content in Org-mode for Hakyll (~10 hours)
  - Use Org-mode to create content for your static site.
- [ ] Topic: Static Site Generation with Hakyll: Building a Basic Hakyll Site (~10 hours)
  - Structure your site with Hakyll templates.
- [ ] Topic: Static Site Generation with Hakyll: Customizing Your Hakyll Site (~10 hours)
  - Personalize your site with CSS and advanced templates.
- [ ] Topic: Static Site Generation with Hakyll: Deploying to Hostinger (~5 hours)
  - Deploy your Haskell-generated static site to Hostinger, achieving your second priority.
- [ ] Topic: JavaScript with Accessibility: JavaScript Basics and Accessible Interactions (~10 hours)
  - Add interactivity to your site with accessible JavaScript.
- [ ] Topic: Algorithms and Data Structures: Introduction to Functional Programming for Knowledge Management (~10 hours)
  - Learn pure functions and immutability as a foundation for advanced topics.
- [ ] Topic: Algorithms and Data Structures: Recursion in Graph and Tree Structures (~15 hours)
  - Master recursion for traversing data structures, useful for later graph topics.
- [ ] Topic: Algorithms and Data Structures: Higher-Order Functions for Data Processing (~10 hours)
  - Apply map, filter, and fold for efficient data handling.
- [ ] Topic: Functional Design Patterns: Introduction to Functional Design Patterns (~10 hours)
  - Understand functional vs. object-oriented design patterns.
- [ ] Topic: Functional Design Patterns: Monoids and Foldables for Data Aggregation (~10 hours)
  - Use monoids to aggregate data functionally.
- [ ] Topic: Functional Design Patterns: Functors and Applicatives for Data Transformation (~10 hours)
  - Transform data with functors and applicatives in a functional style.
- [ ] Topic: Relational Databases and SQL: Introduction to Relational Databases (~10 hours)
  - Learn tables, keys, and relationships for database fundamentals.
- [ ] Topic: Relational Databases and SQL: SQL Basics: CRUD Operations (~10 hours)
  - Perform Create, Read, Update, Delete operations with SQL.
- [ ] Topic: Relational Databases and SQL: Advanced Querying: Joins, Subqueries, and Aggregates (~15 hours)
  - Write complex SQL queries to manipulate data effectively.
- [ ] Topic: Graph Theory and Neo4j: Introduction to Graphs and Neo4j (~10 hours)
  - Understand graph concepts and set up Neo4j for knowledge management.
- [ ] Topic: Graph Theory and Neo4j: Graph Representations and Data Modeling (~10 hours)
  - Model knowledge as graphs in Neo4j.
- [ ] Topic: Graph Theory and Neo4j: Traversing Graphs with BFS and DFS (~10 hours)
  - Implement breadth-first and depth-first search algorithms.
- [ ] Topic: Graph Theory and Neo4j: Shortest Path Algorithms (~10 hours)
  - Apply Dijkstra’s algorithm to find shortest paths in graphs.
- [ ] Topic: Graph Theory and Neo4j: Cypher Query Language Basics (~10 hours)
  - Query Neo4j graphs with Cypher.
- [ ] Topic: Graph Theory and Neo4j: Advanced Cypher Queries (~10 hours)
  - Use aggregation and pathfinding in Cypher for complex queries.
- [ ] Topic: Graph Theory and Neo4j: Performance Optimization in Neo4j (~10 hours)
  - Optimize Neo4j queries and indexing for efficiency.
- [ ] Topic: Semantic Web and Linked Data: Introduction to the Semantic Web and Linked Data (~10 hours)
  - Learn RDF and linked data principles for knowledge representation.
- [ ] Topic: Semantic Web and Linked Data: RDF and Turtle Syntax (~10 hours)
  - Write RDF triples using Turtle syntax.
- [ ] Topic: Semantic Web and Linked Data: SPARQL Query Language (~10 hours)
  - Query RDF data with SPARQL for linked data applications.
- [ ] Topic: Semantic Web and Linked Data: Ontology Development with OWL (~10 hours)
  - Build ontologies to structure knowledge semantically.
- [ ] Topic: Semantic Web and Linked Data: Publishing Linked Data (~10 hours)
  - Share RDF data following linked data best practices.
- [ ] Topic: Semantic Web and Linked Data: Consuming and Integrating Linked Data (~10 hours)
  - Access and integrate external linked data sources.
- [ ] Topic: Designing Domain-Specific Languages (DSLs): Introduction to Domain-Specific Languages (~10 hours)
  - Understand DSL concepts and their benefits.
- [ ] Topic: Designing Domain-Specific Languages (DSLs): Language Design Principles (~10 hours)
  - Learn principles for designing DSL syntax and semantics.
- [ ] Topic: Designing Domain-Specific Languages (DSLs): Syntax and Parsing (~15 hours)
  - Parse a DSL using Haskell tools like Parsec.
- [ ] Topic: Designing Domain-Specific Languages (DSLs): Semantics and Interpretation (~15 hours)
  - Define and interpret your DSL’s meaning.
- [ ] Topic: Designing Domain-Specific Languages (DSLs): Type Systems for DSLs (~10 hours)
  - Implement type checking in your DSL.
- [ ] Topic: Designing Domain-Specific Languages (DSLs): DSLs in Functional Programming (~10 hours)
  - Use Haskell to create embedded DSLs.
- [ ] Topic: Designing Domain-Specific Languages (DSLs): Practical DSL Design (~15 hours)
  - Design and implement a practical DSL for a specific domain.
- [ ] Topic: Basic Web Security: Introduction to Web Security (~10 hours)
  - Understand the importance of securing web applications.
- [ ] Topic: Basic Web Security: Common Web Vulnerabilities (~10 hours)
  - Learn about SQL injection, XSS, and CSRF vulnerabilities.
- [ ] Topic: Basic Web Security: Secure Coding Practices (~10 hours)
  - Write code to prevent common vulnerabilities.
- [ ] Topic: Basic Web Security: Authentication and Authorization (~10 hours)
  - Secure user logins and access control.
- [ ] Topic: Basic Web Security: Data Protection (~10 hours)
  - Protect sensitive data with encryption techniques.
- [ ] Topic: Basic Web Security: Web Application Firewalls (WAF) (~10 hours)
  - Use WAFs to enhance web app security.
- [ ] Topic: Basic Web Security: Security Testing (~10 hours)
  - Test web apps for vulnerabilities and fix them.
- [ ] Topic: Basic Web Security: Incident Response (~10 hours)
  - Prepare for and respond to security breaches.
- [ ] Topic: Machine Learning Basics: Introduction to Machine Learning (~10 hours)
  - Explore ML categories (supervised, unsupervised) and applications.
- [ ] Topic: Machine Learning Basics: Data Preprocessing (~10 hours)
  - Clean and prepare data for ML models (requires Python skills).
- [ ] Topic: Machine Learning Basics: Supervised Learning: Regression (~10 hours)
  - Build regression models with Python.
- [ ] Topic: Machine Learning Basics: Supervised Learning: Classification (~10 hours)
  - Implement classification algorithms in Python.
- [ ] Topic: Machine Learning Basics: Unsupervised Learning: Clustering (~10 hours)
  - Use clustering to find patterns in data.
- [ ] Topic: Machine Learning Basics: Model Evaluation and Validation (~10 hours)
  - Evaluate ML models with metrics and validation techniques.
- [ ] Topic: Machine Learning Basics: Introduction to Neural Networks (~10 hours)
  - Build simple neural networks with Python libraries.
- [ ] Topic: Natural Language Processing: Introduction to NLP (~10 hours)
  - Understand NLP basics and real-world applications.
- [ ] Topic: Natural Language Processing: Text Preprocessing (~10 hours)
  - Clean and preprocess text data with Python.
- [ ] Topic: Natural Language Processing: Text Representation (~10 hours)
  - Convert text to numerical formats for ML models.
- [ ] Topic: Natural Language Processing: Linguistic Annotation (~10 hours)
  - Perform part-of-speech tagging and named entity recognition.
- [ ] Topic: Natural Language Processing: Sentiment Analysis (~10 hours)
  - Analyze text sentiment using Python tools.
- [ ] Topic: Natural Language Processing: Machine Learning for NLP (~10 hours)
  - Apply ML techniques to NLP tasks.
- [ ] Topic: Critical Thinking with AI: Introduction to Critical Thinking and AI (~10 hours)
  - Learn how critical thinking enhances AI usage.
- [ ] Topic: Critical Thinking with AI: Understanding AI Systems (~10 hours)
  - Explore AI capabilities and limitations.
- [ ] Topic: Critical Thinking with AI: Using AI Tools for Research (~10 hours)
  - Leverage AI for efficient research workflows.
- [ ] Topic: Critical Thinking with AI: Evaluating AI-Generated Content (~10 hours)
  - Assess the credibility of AI outputs.
- [ ] Topic: Critical Thinking with AI: Identifying Biases in AI Systems (~10 hours)
  - Detect and address biases in AI models.
- [ ] Topic: Critical Thinking with AI: Ethical Considerations in AI (~10 hours)
  - Explore ethical issues like privacy and accountability in AI.
- [ ] Topic: Critical Thinking with AI: Applying Critical Thinking to AI Applications (~10 hours)
  - Critically evaluate real-world AI use cases.
- [ ] Topic: Critical Thinking with AI: AI and Functional Programming (~10 hours)
  - Apply functional programming principles to AI development.
- [ ] Topic: Critical Thinking with AI: Critical Analysis of AI Research (~10 hours)
  - Analyze AI research papers critically.
- [ ] Topic: Critical Thinking with AI: Ethical Considerations in AI (advanced) (~10 hours)
  - Dive deeper into advanced ethical challenges in AI.
- [ ] Capstone: Phase 1: DSL Design (~20-30 hours)
  - Study RDF to understand its structure and modularity.
  - Design a simple grammar for your DSL (e.g., "entity predicate value").
  - Plan how knowledge modules will depend on each other (e.g., shared definitions).
- [ ] Capstone: Phase 2: DSL Implementation (~30-40 hours)
  - Use Haskell (with Megaparsec) to implement the DSL parser and interpreter.
  - Define an Abstract Syntax Tree (AST) and map it to an in-memory knowledge graph.
  - Test the DSL with a sample knowledge domain (e.g., programming concepts).
- [ ] Capstone: Phase 3: Knowledge Module Management with Nix (~10-20 hours)
  - Define each knowledge module as a Nix derivation.
  - Use Nix’s dependency system to link modules that rely on each other.
  - Write a top-level Nix expression to build the full knowledge base reproducibly.
- [ ] Capstone: Phase 4: Integrating with Neo4j (~20-30 hours)
  - Map DSL constructs (e.g., triples) to Neo4j nodes and relationships.
  - Use the Neo4j Haskell driver to insert and query data.
  - Write Cypher queries to explore and validate the knowledge graph.
- [ ] Capstone: Phase 5: Machine Learning Integration (~30-40 hours)
  - Extract relevant data from Neo4j for machine learning (e.g., node features).
  - Use Python (with Scikit-learn) to train a model (e.g., classification or clustering).
  - Integrate ML insights back into the knowledge graph (e.g., predicted labels).
- [ ] Capstone: Phase 6: Data Visualization (~20-30 hours)
  - Integrate Cytoscape.js (or another library) into your Hakyll-generated website.
  - Fetch knowledge graph and ML insights to create interactive visualizations.
  - Ensure visualizations are responsive and accessible.
- [ ] Capstone: Phase 7: Deployment and Reflection (~10-20 hours)
  - Build the static site using Hakyll (`hakyll build`).
  - Deploy to a hosting provider (e.g., Hostinger) via FTP or Git.
  - Write a 3-4 page reflection in Org-mode on the project’s challenges, successes, and future ideas.
*** License
This learning program is for personal use but can be freely adapted by others.

** Development
*** Process
- Fed an initial prompt to an AI language model
- Iterated with the AI to refine the curriculum based on my goals

*** Important Decisions
- Chose to make this repo public for transparency and feedback

*** To do
- Individual class content may be refined and updated as I go along

*** Contributing
- Open to suggestions for improving the curriculum

* By Whom
Me, with structure and guidance from Grok
